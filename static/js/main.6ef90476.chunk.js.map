{"version":3,"sources":["actions/calendarActions.js","actions/types.js","components/ReminderForm.js","components/DaysOfWeek.js","components/Reminder.js","components/Cell.js","components/DisplayCells.js","components/Calendar.js","App.js","serviceWorker.js","reducers/calendarReducers.js","reducers/rootReducer.js","index.js"],"names":["toggleModal","e","dispatch","preventDefault","type","ModalContainer","styled","div","_templateObject","Form","_templateObject2","CloseForm","button","_templateObject3","InputTime","input","_templateObject4","TextArea","textarea","_templateObject5","props","backgroundColor","Confirm","_templateObject6","ColorGrid","_templateObject7","ColorPicker","_templateObject8","currentColor","colorRange","mapDispatchToProps","addReminder","reminder","payload","connect","state","date","calendar","activeDate","activeIndex","_ref","_useState","useState","_useState2","Object","slicedToArray","time","setTime","_useState3","_useState4","text","setText","_useState5","_useState6","color","setColor","react_default","a","createElement","dateFns","format","onChange","target","value","length","placeholder","map","colorChoice","key","onClick","Day","DaysOfWeek_templateObject","DaysOfWeek","month","days","startDate","startOfMonth","concat","i","push","addDays","Fragment","day","ReminderContainer","Reminder_templateObject","Reminder","index","removeReminder","DateCell","Cell_templateObject","ReminderList","Cell_templateObject2","ReminderButton","Cell_templateObject3","setActiveDate","dateData","remindersNumber","reminders","getDate","lib","components_Reminder","DisplayCells","components_Cell","CellContainer","Calendar_templateObject","daysInMonth","components_DaysOfWeek","components_DisplayCells","modalOpen","className","components_ReminderForm","components_Calendar","Boolean","window","location","hostname","match","Date","numberOfDays","getDaysInMonth","initialState","combineReducers","arguments","undefined","action","objectSpread","newDaysInMonth","sort","b","firstTime","secondTime","isAfter","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","apply","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qJAEaA,EAAc,SAAAC,GAAC,OAAI,SAAAC,GAC9BD,EAAEE,iBAEFD,EAAS,CACPE,KCNwB,y+CCM5B,IAAMC,EAAiBC,IAAOC,IAAVC,KAadC,EAAOH,IAAOC,IAAVG,KAWJC,EAAYL,IAAOM,OAAVC,KAUTC,EAAYR,IAAOS,MAAVC,KAITC,EAAWX,IAAOY,SAAVC,IAIQ,SAAAC,GAAK,OAAIA,EAAMC,kBAG/BC,EAAUhB,IAAOM,OAAVW,KAQPC,EAAYlB,IAAOC,IAAVkB,KAITC,EAAcpB,IAAOC,IAAVoB,IACK,SAAAP,GAAK,OAAIA,EAAMC,iBAMzB,SAAAD,GAAK,OACbA,EAAMC,kBAAoBD,EAAMQ,cAAgB,oBAG9CC,EAAa,CAAC,UAAW,WAAY,QAAS,UAuE9CC,EAAqB,CAAE9B,cAAa+B,YF5Hf,SAAAC,GAAQ,OAAI,SAAA9B,GACrCA,EAAS,CACPE,KCrBwB,eDsBxB6B,QAASD,IAGX9B,EAAS,CACPE,KC5BwB,oBCmJb8B,cATS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAME,SAASC,WACrBC,YAAaJ,EAAME,SAASE,cAQ9BT,EAFaI,CAvEM,SAAAM,GAAqD,IAAlDxC,EAAkDwC,EAAlDxC,YAAaoC,EAAqCI,EAArCJ,KAAMG,EAA+BC,EAA/BD,YAAaR,EAAkBS,EAAlBT,YAAkBU,EAChDC,mBAAS,IADuCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjEK,EADiEH,EAAA,GAC3DI,EAD2DJ,EAAA,GAAAK,EAEhDN,mBAAS,IAFuCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEjEE,EAFiED,EAAA,GAE3DE,EAF2DF,EAAA,GAAAG,EAG9CV,mBAAS,IAHqCW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGjEE,EAHiED,EAAA,GAG1DE,EAH0DF,EAAA,GAgCxE,OACEG,EAAAC,EAAAC,cAACrD,EAAD,KACEmD,EAAAC,EAAAC,cAACjD,EAAD,KACE+C,EAAAC,EAAAC,cAAA,6BAAqBC,IAAQC,OAAOxB,EAAM,iBAC1CoB,EAAAC,EAAAC,cAAC5C,EAAD,CAAW+C,SA/BC,SAAA5D,GAChB8C,EAAQ9C,EAAE6D,OAAOC,QA8BmBA,MAAOjB,EAAM1C,KAAK,SAClDoD,EAAAC,EAAAC,cAACzC,EAAD,CACE4C,SA7BU,SAAA5D,GACZA,EAAE6D,OAAOC,MAAMC,QAAU,IAC3Bb,EAAQlD,EAAE6D,OAAOC,QA4BbA,MAAOb,EACPe,YAAY,qBACZ5C,gBAAiBiC,IAEnBE,EAAAC,EAAAC,cAAClC,EAAD,KACGK,EAAWqC,IAAI,SAAAC,GACd,OACEX,EAAAC,EAAAC,cAAChC,EAAD,CACE0C,IAAKD,EACL9C,gBAAiB8C,EACjBvC,aAAc0B,EACde,QAAS,WAlCrBd,EAkCsCY,SAKlCX,EAAAC,EAAAC,cAACpC,EAAD,CAAS+C,QApCQ,WAQR,KAATvB,GAAwB,KAATI,GAAyB,KAAVI,GAChCvB,EARe,CACfQ,YAAaA,EACbO,KAAMA,EACNI,KAAMA,EACNI,MAAOA,MA+BL,WACAE,EAAAC,EAAAC,cAAC/C,EAAD,CAAW0D,QAASrE,GAApB,wKChIR,IAAMsE,EAAMhE,IAAOC,IAAVgE,KA0BMC,EAnBI,SAAAhC,GAIjB,IAJgC,IAAZiC,EAAYjC,EAAZiC,MACdC,EAAO,GACTC,EAAYhB,IAAQiB,aAAR,KAAAC,OAA0BJ,IAEjCK,EAAI,EAAGA,EAAI,EAAGA,IACrBJ,EAAKK,KACHvB,EAAAC,EAAAC,cAAA,WAAMC,IAAQC,OAAOD,IAAQqB,QAAQL,EAAWG,GAAI,UAIxD,OACEtB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwB,SAAA,KACGP,EAAKR,IAAI,SAAAgB,GACR,OAAO1B,EAAAC,EAAAC,cAACY,EAAD,KAAMY,oOCrBrB,IAAMC,EAAoB7E,IAAOC,IAAV6E,IAED,SAAAhE,GAAK,OAAIA,EAAMkC,QAgBtB+B,EARE,SAAA7C,GAAkD,IAA/CM,EAA+CN,EAA/CM,KAAMI,EAAyCV,EAAzCU,KAAMI,EAAmCd,EAAnCc,MAAmCd,EAA5B8C,MAA4B9C,EAArB+C,eAC5C,OACE/B,EAAAC,EAAAC,cAACyB,EAAD,CAAmB7B,MAAOA,GACvBR,EADH,IACUI,wmBCRd,IAAMsC,EAAWlF,IAAOC,IAAVkF,KAkBRC,EAAepF,IAAOC,IAAVoF,KAIZC,EAAiBtF,IAAOC,IAAVsF,KAwCd/D,EAAqB,CAAEgE,cL5DA,SAAAC,GAAQ,OAAI,SAAA7F,GACvCA,EAAS,CACPE,KCZwB,iBDe1BF,EAAS,CACPE,KCf2B,kBDgB3B6B,QAAS8D,OKuDE7D,cANS,SAAAC,GACtB,MAAO,CAAE6D,gBAAiB7D,EAAME,SAAS4D,YAOzCnE,EAFaI,CAjCF,SAAAM,GAA8C,IAA3C0C,EAA2C1C,EAA3C0C,IAAKI,EAAsC9C,EAAtC8C,MAAOQ,EAA+BtD,EAA/BsD,cAAeG,EAAgBzD,EAAhByD,UACzC,OACEzC,EAAAC,EAAAC,cAAC8B,EAAD,KACG7B,IAAQuC,QAAQhB,GACjB1B,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAACyC,EAAA,WAAD,KACGF,EAAUjC,OAAS,GAClBiC,EAAU/B,IAAI,SAAAlC,GACZ,OACEwB,EAAAC,EAAAC,cAAC0C,EAAD,CACEd,MAAOA,EACPhC,MAAOtB,EAASsB,MAChBJ,KAAMlB,EAASkB,KACfJ,KAAMd,EAASc,KACfsB,IAAKpC,EAASsD,MAAQtD,EAASc,WAM3CU,EAAAC,EAAAC,cAACkC,EAAD,CAAgBvB,QAAS,kBAAMyB,EAAc,CAAE1D,KAAM8C,EAAKI,YAA1D,QC3CSe,EAbM,SAAA7D,GACnB,OADkCA,EAAZiC,MACTP,IAAI,SAACgB,EAAKI,GACrB,OACE9B,EAAAC,EAAAC,cAAC4C,EAAD,CACElC,IAAKc,EAAI9C,KACT8C,IAAKA,EAAI9C,KACT6D,UAAWf,EAAIe,UACfX,MAAOA,mLCHf,IAAMiB,EAAgBjG,IAAOC,IAAViG,KA4BJtE,cAPS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAME,SAASD,KACrBqE,YAAatE,EAAME,SAASoE,cAIjBvE,CArBE,SAAAM,GAA2B,IAAxBJ,EAAwBI,EAAxBJ,KAAMqE,EAAkBjE,EAAlBiE,YAClBhC,EAAQd,IAAQC,OAAOxB,EAAM,aAEnC,OACEoB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKe,GACLjB,EAAAC,EAAAC,cAAC6C,EAAD,KACE/C,EAAAC,EAAAC,cAACgD,EAAD,CAAYjC,MAAOA,IACnBjB,EAAAC,EAAAC,cAACiD,EAAD,CAAclC,MAAOgC,QCCdvE,cANS,SAAAC,GACtB,MAAO,CACLyE,UAAWzE,EAAME,SAASuE,YAM5B,CAAE5G,eAFWkC,CAfH,SAAAM,GAAgC,IAA7BoE,EAA6BpE,EAA7BoE,UAA6BpE,EAAlBxC,YACxB,OACEwD,EAAAC,EAAAC,cAAA,OAAKmD,UAAU,OACZD,GAAapD,EAAAC,EAAAC,cAACoD,EAAD,MACdtD,EAAAC,EAAAC,cAACqD,EAAD,SCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,iCAHIhF,GAAO,IAAIiF,KACTC,GAAe3D,IAAQ4D,eAAenF,IACxCqE,GAAc,GACT3B,GAAI,EAAGA,GAAIwC,GAAcxC,KAChC2B,GAAY1B,KAAK,CACf3C,KAAMuB,IAAQqB,QAAQrB,IAAQiB,aAAaxC,IAAO0C,IAClDmB,UAAW,KAIf,IAAMuB,GAAe,CACnBZ,WAAW,EACXtE,WAAY,KACZC,YAAa,KACb0D,UAAW,EACX7D,QACAqE,gBChBagB,eAAgB,CAC7BpF,SDkBa,WAAkC,IAAjCF,EAAiCuF,UAAA1D,OAAA,QAAA2D,IAAAD,UAAA,GAAAA,UAAA,GAAzBF,GAAcI,EAAWF,UAAA1D,OAAA,EAAA0D,UAAA,QAAAC,EAC/C,OAAQC,EAAOxH,MACb,ITxBwB,eSyBtB,OAAOwC,OAAAiF,GAAA,EAAAjF,CAAA,GACFT,EADL,CAEEyE,WAAYzE,EAAMyE,YAEtB,IT5B2B,kBS6BzB,OAAOhE,OAAAiF,GAAA,EAAAjF,CAAA,GACFT,EADL,CAEEG,WAAYsF,EAAO3F,QAAQG,KAC3BG,YAAaqF,EAAO3F,QAAQqD,QAEhC,ITjCwB,eSkCtB,IAAIwC,EAAiB3F,EAAMsE,YAe3B,OAdAqB,EAAeF,EAAO3F,QAAQM,aAAa0D,UAAUlB,KAAK6C,EAAO3F,SACjE6F,EAAeF,EAAO3F,QAAQM,aAAa0D,UAAU8B,KAAK,SAACtE,EAAGuE,GAC5D,IAAIC,EAAS,cAAApD,OAAiBpB,EAAEX,MAC5BoF,EAAU,cAAArD,OAAiBmD,EAAElF,MACjC,OAAImF,IAAcC,EACT,EAELvE,IAAQwE,QAAQF,EAAWC,GACtB,GAEC,IAILtF,OAAAiF,GAAA,EAAAjF,CAAA,GACFT,EADL,CAEEsE,YAAaqB,EACb7B,UAAW9D,EAAM8D,UAAY,IAEjC,QACE,OAAO9D,ME7CPiG,GAAa,CAACC,MAEdC,GAAmBrB,OAAOsB,sCAAwCC,IAClEC,GAAQC,YACZC,GACAL,GAAiBM,IAAeC,WAAf,EAAmBT,MAGtCU,IAASC,OACPvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CAAUP,MAAOA,IACfjF,EAAAC,EAAAC,cAACuF,EAAD,OAEFC,SAASC,eAAe,SHyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6ef90476.chunk.js","sourcesContent":["import { TOGGLE_MODAL, SET_ACTIVE_DATE, ADD_REMINDER } from \"./types\";\r\n\r\nexport const toggleModal = e => dispatch => {\r\n  e.preventDefault();\r\n\r\n  dispatch({\r\n    type: TOGGLE_MODAL\r\n  });\r\n};\r\n\r\nexport const setActiveDate = dateData => dispatch => {\r\n  dispatch({\r\n    type: TOGGLE_MODAL\r\n  });\r\n\r\n  dispatch({\r\n    type: SET_ACTIVE_DATE,\r\n    payload: dateData\r\n  });\r\n};\r\n\r\nexport const addReminder = reminder => dispatch => {\r\n  dispatch({\r\n    type: ADD_REMINDER,\r\n    payload: reminder\r\n  });\r\n\r\n  dispatch({\r\n    type: TOGGLE_MODAL\r\n  });\r\n};\r\n","export const TOGGLE_MODAL = \"TOGGLE_MODAL\";\r\nexport const SET_ACTIVE_DATE = \"SET_ACTIVE_DATE\";\r\nexport const ADD_REMINDER = \"ADD_REMINDER\";\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport dateFns from \"date-fns\";\r\nimport { toggleModal, addReminder } from \"../actions/calendarActions\";\r\n\r\nconst ModalContainer = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  z-index: 100;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Form = styled.div`\r\n  position: relative;\r\n  height: 15rem;\r\n  width: 50vw;\r\n  background-color: #eee;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n`;\r\n\r\nconst CloseForm = styled.button`\r\n  background: none;\r\n  border: none;\r\n  position: absolute;\r\n  top: 2px;\r\n  right: 5px;\r\n  cursor: pointer;\r\n  font-size: 2rem;\r\n`;\r\n\r\nconst InputTime = styled.input`\r\n  border: none;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  width: 20vw;\r\n  border: none;\r\n  height: 30%;\r\n  background-color: ${props => props.backgroundColor};\r\n`;\r\n\r\nconst Confirm = styled.button`\r\n  border: none;\r\n  background-color: black;\r\n  color: white;\r\n  padding: 0.5rem 1rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ColorGrid = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst ColorPicker = styled.div`\r\n  background-color: ${props => props.backgroundColor}\r\n  height: 15px;\r\n  width: 15px;\r\n  border-radius: 50%;\r\n  margin-right: 2px;\r\n  cursor: pointer;\r\n  border: ${props =>\r\n    props.backgroundColor === props.currentColor && \"2px solid black\"};\r\n  `;\r\n\r\nconst colorRange = [\"crimson\", \"darkblue\", \"green\", \"orange\"];\r\n\r\nconst ReminderForm = ({ toggleModal, date, activeIndex, addReminder }) => {\r\n  const [time, setTime] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [color, setColor] = useState(\"\");\r\n\r\n  const inputTime = e => {\r\n    setTime(e.target.value);\r\n  };\r\n\r\n  const inputText = e => {\r\n    if (e.target.value.length <= 30) {\r\n      setText(e.target.value);\r\n    }\r\n  };\r\n\r\n  const inputColor = chosenColor => {\r\n    setColor(chosenColor);\r\n  };\r\n\r\n  const submitReminder = () => {\r\n    const reminder = {\r\n      activeIndex: activeIndex,\r\n      time: time,\r\n      text: text,\r\n      color: color\r\n    };\r\n\r\n    if (time !== \"\" && text !== \"\" && color !== \"\") {\r\n      addReminder(reminder);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ModalContainer>\r\n      <Form>\r\n        <h2>Add Reminder to {dateFns.format(date, \"Do MMMM YYYY\")}</h2>\r\n        <InputTime onChange={inputTime} value={time} type=\"time\" />\r\n        <TextArea\r\n          onChange={inputText}\r\n          value={text}\r\n          placeholder=\"Max 30 characters.\"\r\n          backgroundColor={color}\r\n        />\r\n        <ColorGrid>\r\n          {colorRange.map(colorChoice => {\r\n            return (\r\n              <ColorPicker\r\n                key={colorChoice}\r\n                backgroundColor={colorChoice}\r\n                currentColor={color}\r\n                onClick={() => inputColor(colorChoice)}\r\n              />\r\n            );\r\n          })}\r\n        </ColorGrid>\r\n        <Confirm onClick={submitReminder}>Confirm</Confirm>\r\n        <CloseForm onClick={toggleModal}>&times;</CloseForm>\r\n      </Form>\r\n    </ModalContainer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    date: state.calendar.activeDate,\r\n    activeIndex: state.calendar.activeIndex\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = { toggleModal, addReminder };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ReminderForm);\r\n","import React from \"react\";\r\nimport dateFns from \"date-fns\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Day = styled.div`\r\n  background-color: #222;\r\n  color: #eee;\r\n  font-size: 1.2rem;\r\n  padding: 0.5rem;\r\n`;\r\n\r\nconst DaysOfWeek = ({ month }) => {\r\n  const days = [];\r\n  let startDate = dateFns.startOfMonth(`1 ${month}`);\r\n\r\n  for (let i = 0; i < 7; i++) {\r\n    days.push(\r\n      <div>{dateFns.format(dateFns.addDays(startDate, i), \"dddd\")}</div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {days.map(day => {\r\n        return <Day>{day}</Day>;\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DaysOfWeek;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ReminderContainer = styled.div`\r\n  position: relative;\r\n  background-color: ${props => props.color};\r\n  font-size: 1rem;\r\n  border-radius: 0.75rem;\r\n  padding: 2px 5px;\r\n  margin: 2px;\r\n  color: white;\r\n`;\r\n\r\nconst Reminder = ({ time, text, color, index, removeReminder }) => {\r\n  return (\r\n    <ReminderContainer color={color}>\r\n      {time} {text}\r\n    </ReminderContainer>\r\n  );\r\n};\r\n\r\nexport default Reminder;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setActiveDate } from \"../actions/calendarActions\";\r\nimport dateFns from \"date-fns\";\r\nimport styled from \"styled-components\";\r\nimport Reminder from \"./Reminder\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\n\r\nconst DateCell = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  height: 10vw;\r\n  border: 1px solid #eee;\r\n  text-align: left;\r\n  padding: 1rem;\r\n\r\n  font-size: 2rem;\r\n  color: #ccc;\r\n  transition: all 0.2s ease;\r\n\r\n  &:hover {\r\n    background-color: #ccc;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst ReminderList = styled.div`\r\n  height: 60%;\r\n`;\r\n\r\nconst ReminderButton = styled.div`\r\n  position: absolute;\r\n  bottom: 5px;\r\n  right: 10px;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: #888;\r\n`;\r\n\r\nconst Cell = ({ day, index, setActiveDate, reminders }) => {\r\n  return (\r\n    <DateCell>\r\n      {dateFns.getDate(day)}\r\n      <ReminderList>\r\n        <Scrollbars>\r\n          {reminders.length > 0 &&\r\n            reminders.map(reminder => {\r\n              return (\r\n                <Reminder\r\n                  index={index}\r\n                  color={reminder.color}\r\n                  text={reminder.text}\r\n                  time={reminder.time}\r\n                  key={reminder.index + reminder.time}\r\n                />\r\n              );\r\n            })}\r\n        </Scrollbars>\r\n      </ReminderList>\r\n      <ReminderButton onClick={() => setActiveDate({ date: day, index })}>\r\n        +\r\n      </ReminderButton>\r\n    </DateCell>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { remindersNumber: state.calendar.reminders };\r\n};\r\n\r\nconst mapDispatchToProps = { setActiveDate };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Cell);\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\nconst DisplayCells = ({ month }) => {\r\n  return month.map((day, index) => {\r\n    return (\r\n      <Cell\r\n        key={day.date}\r\n        day={day.date}\r\n        reminders={day.reminders}\r\n        index={index}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nexport default DisplayCells;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport dateFns from \"date-fns\";\r\nimport DaysOfWeek from \"./DaysOfWeek\";\r\nimport DisplayCells from \"./DisplayCells\";\r\n\r\nconst CellContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 13vw);\r\n  margin: 2rem auto;\r\n  grid-gap: 1px;\r\n`;\r\n\r\nconst Calendar = ({ date, daysInMonth }) => {\r\n  const month = dateFns.format(date, \"MMMM YYYY\");\r\n\r\n  return (\r\n    <div>\r\n      <h1>{month}</h1>\r\n      <CellContainer>\r\n        <DaysOfWeek month={month} />\r\n        <DisplayCells month={daysInMonth} />\r\n      </CellContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    date: state.calendar.date,\r\n    daysInMonth: state.calendar.daysInMonth\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Calendar);\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { toggleModal } from \"./actions/calendarActions\";\nimport \"./App.css\";\nimport ReminderForm from \"./components/ReminderForm\";\n\nimport Calendar from \"./components/Calendar\";\n\nconst App = ({ modalOpen, toggleModal }) => {\n  return (\n    <div className=\"App\">\n      {modalOpen && <ReminderForm />}\n      <Calendar />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    modalOpen: state.calendar.modalOpen\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { toggleModal }\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import dateFns from \"date-fns\";\r\nimport { TOGGLE_MODAL, SET_ACTIVE_DATE, ADD_REMINDER } from \"../actions/types\";\r\n\r\nlet date = new Date();\r\nconst numberOfDays = dateFns.getDaysInMonth(date);\r\nlet daysInMonth = [];\r\nfor (let i = 0; i < numberOfDays; i++) {\r\n  daysInMonth.push({\r\n    date: dateFns.addDays(dateFns.startOfMonth(date), i),\r\n    reminders: []\r\n  });\r\n}\r\n\r\nconst initialState = {\r\n  modalOpen: false,\r\n  activeDate: null,\r\n  activeIndex: null,\r\n  reminders: 0,\r\n  date,\r\n  daysInMonth\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TOGGLE_MODAL:\r\n      return {\r\n        ...state,\r\n        modalOpen: !state.modalOpen\r\n      };\r\n    case SET_ACTIVE_DATE:\r\n      return {\r\n        ...state,\r\n        activeDate: action.payload.date,\r\n        activeIndex: action.payload.index\r\n      };\r\n    case ADD_REMINDER:\r\n      let newDaysInMonth = state.daysInMonth;\r\n      newDaysInMonth[action.payload.activeIndex].reminders.push(action.payload);\r\n      newDaysInMonth[action.payload.activeIndex].reminders.sort((a, b) => {\r\n        let firstTime = `2014-02-11 ${a.time}`;\r\n        let secondTime = `2014-02-11 ${b.time}`;\r\n        if (firstTime === secondTime) {\r\n          return 0;\r\n        }\r\n        if (dateFns.isAfter(firstTime, secondTime)) {\r\n          return 1;\r\n        } else {\r\n          return -1;\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        daysInMonth: newDaysInMonth,\r\n        reminders: state.reminders + 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport calendarReducers from \"./calendarReducers\";\r\n\r\nexport default combineReducers({\r\n  calendar: calendarReducers\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers/rootReducer\";\nimport dateFns from \"date-fns\";\n\nconst middleware = [thunk];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(...middleware))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}